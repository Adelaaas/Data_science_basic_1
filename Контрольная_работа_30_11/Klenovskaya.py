# -*- coding: utf-8 -*-
"""Кленовская_вариант_контрольной.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WSs4xPbQu-x6_nGsZ3CQq1YNTNJY2iqB

# Кленовская Вера Владимировна

Ссылка на данные: https://www.kaggle.com/rashmiranu/banking-dataset-classification?select=new_train.csv

Скачивайте файл только new_train.csv
"""

from google.colab import files
uploaded = files.upload()

# 1. Считайте DataFrame

# ваш код тут
import numpy as np
import pandas as pd
df = pd.read_csv('new_train (1).csv')
df.head()

# 2. Проведите анализ DataFrame
# - Какая размерность данных?
# - Какие типы переменных представленны в наборе данных?
# - Есть пропуски в данных? Если да, удалите строки, в которых есть пропуски

# ваш код тут

df.info(memory_usage='deep')
df=df.dropna()

# 3. Напишите функцию, которая принимает DataFrame, тип job, тип marital
# и возвращает кортеж 
# ((кол-во записей этого типа job, кол-во записей этого типа marital), (средний возраст для этого типа job, средний возраст для этого типа marital))
# т.е. кортеж состоит из двух кортежей

# ваш код тут

# 4. Постройте график:
# - гистограмма количества записей для каждого типа marital
# - гистограмма количества записей для каждого типа contact

# Графики должны располагать на РАЗНЫХ координатных плоскостях
# У графика должен быть заголовок, подписаны оси, а также легенда (т е графики должны быть подписаны)

# ваш код тут
import matplotlib.pyplot as plt
x1 = ['married', 'divorced']
y1 = [len(df[df['marital'] == 'married']), len(df[df['marital'] == 'divorced'])]
x2 = ['cellular', 'telephone']
y2 = [len(df[df['contact'] == 'cellular']), len(df[df['contact'] == 'telephone'])]
fig, axes = plt.subplots(1, 2)
axes[0].bar(x1, y1)
axes[1].bar(x2, y2)
axes[0].set_title('marital')
axes[1].set_title('contact')

plt.show()

# 5. Удалите из набора данных все данные для которых age < 30

# ваш код тут
df_drop = df.drop(df[df.age < 30].index)
df_drop

# 6. Создайте новый столбец, где все значения в столбце job будут заменены на числовые
# например retired = 0 и т.д.
df['job'].value_counts()
df1=df['job'].map({'admin.':0, 'blue-collar':1, 'technician':2, 'services':3, 'management':4, 'retired':5, 'entrepreneur':6, 'self-employed':7, 'housemaid':8, 'unemployed':9, 'student':10, 'unknown':11})
df.loc[:,'job2']=df1
new_df